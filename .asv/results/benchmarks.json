{
    "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree": {
        "code": "class TimeSuite:\n    def time_layout_and_rasterize_binomial_tree(self, n):\n        TerminalGraph(self.graph)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.orthogonal, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.box,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "036bf32e4cd4f8bea501fc05d35494af389c607aedb92687b8dac73303151de3",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree_orthogonal_box": {
        "code": "class TimeSuite:\n    def time_layout_and_rasterize_binomial_tree_orthogonal_box(self, n):\n        TerminalGraph(self.graph_ortho_box)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.orthogonal, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.box,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree_orthogonal_box",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "562edddcf481ac0f09dc40f5d10e6ab6101e79b0a63307c6e1b62602b8df5143",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_render_binomial_tree": {
        "code": "class TimeSuite:\n    def time_render_binomial_tree(self, n):\n        with self.console.capture():\n            self.console.print(self.terminal_graph)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.orthogonal, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.box,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_render_binomial_tree",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9384955bb2fc4a49e2b2fcda7653880323a9d0b7cad6e20af1b0bd818a097b6c",
        "warmup_time": -1
    },
    "version": 2
}