{
    "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree": {
        "code": "class TimeSuite:\n    def time_layout_and_rasterize_binomial_tree(self, n):\n        TerminalGraph(self.graph)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.ORTHOGONAL, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.BOX,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8390680a674109dbe4572cc1238ed0d115ba2e0efafe84fd309df80ad5228c88",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree_orthogonal_box": {
        "code": "class TimeSuite:\n    def time_layout_and_rasterize_binomial_tree_orthogonal_box(self, n):\n        TerminalGraph(self.graph_ortho_box)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.ORTHOGONAL, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.BOX,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_layout_and_rasterize_binomial_tree_orthogonal_box",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "05f2ae47414ec86223ef932dfd0c0b6b53251671fafccdcd72061dc432250832",
        "warmup_time": -1
    },
    "benchmarks.TimeSuite.time_render_binomial_tree": {
        "code": "class TimeSuite:\n    def time_render_binomial_tree(self, n):\n        with self.console.capture():\n            self.console.print(self.terminal_graph)\n\n    def setup(self, n):\n        self.graph = binomial_tree(n)\n        self.graph_ortho_box = binomial_tree(n)\n    \n        nx.set_edge_attributes(\n            self.graph_ortho_box, EdgeRoutingMode.ORTHOGONAL, \"$edge-routing-mode\"\n        )\n        nx.set_edge_attributes(\n            self.graph_ortho_box,\n            EdgeSegmentDrawingMode.BOX,\n            \"$edge-segment-drawing-mode\",\n        )\n    \n        self.terminal_graph = TerminalGraph(self.graph)\n        self.console = Console()",
        "min_run_count": 2,
        "name": "benchmarks.TimeSuite.time_render_binomial_tree",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "2",
                "4",
                "5",
                "6",
                "7"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0d189d1e5a8cd4d30cb778f53f7ac14ffa82481b57117f23d0aa353dfa1eb4ba",
        "warmup_time": -1
    },
    "version": 2
}