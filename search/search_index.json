{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to netext","text":"<p>Netext is a graph (network) rendering library for the terminal. It uses the awesome rich library to format output and can use different layout engines to place nodes and edges. The library has a very simple API that allows to render graphs created with networkx and integrates well with applications that use rich to output to the terminal. All styling and formatting is done via attributes of the nodes and edges. Netext also supports textual by providing a graph widget that can display graphs in widgets.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#first-steps","title":"First Steps","text":"<p>To render a graph, you first need to create a networkx graph. Once it's there, the netext API is very simple. Just wrap it in a netext.ConsoleGraph object and render it</p> <pre><code>from netext import ConsoleGraph\nfrom rich import print\n\nimport networkx as nx\n\ng = nx.Graph()\ng.add_node(\"Hello\")\ng.add_node(\"World\")\ng.add_edge(\"Hello\", \"World\")\n\nprint(ConsoleGraph(g))\n</code></pre> <p> Hello\u00a0World \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502Hello\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f * * * * * \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502World\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"tutorial/#a-styled-graph","title":"A Styled Graph","text":"<p>You can easily style the graph by adding attributes to the nodes and edges (see the user guide about styling):</p> <pre><code>import networkx as nx\nfrom rich.style import Style\nfrom rich import box, print\n\nfrom netext import ConsoleGraph, EdgeRoutingMode\n\ng = nx.binomial_tree(3)\n\nnx.set_node_attributes(g, Style(color=\"blue\"), \"$content-style\")\nnx.set_node_attributes(g, Style(color=\"red\"), \"$style\")\nnx.set_node_attributes(g, box.SQUARE, \"$box-type\")\n\nnx.set_edge_attributes(g, Style(color=\"green\"), \"$style\")\n\nprint(ConsoleGraph(g))\n</code></pre> <p> Binomial\u00a0Tree \u250c\u2500\u2500\u2500\u2510 ***\u25020\u2502*** *\u2514\u2500\u2500\u2500\u2518* *** *** *** *** *** \u250c\u2500\u2500\u2500\u2510*\u250c\u2500\u2500\u2500\u2510*\u250c\u2500\u2500\u2500\u2510 \u25021\u2502******\u25022\u2502***\u25024\u2502 \u2514\u2500\u2500\u2500\u2518*\u2514\u2500\u2500\u2500\u2518*\u2514\u2500\u2500\u2500\u2518 *** *** *** *** *** \u250c\u2500\u2500\u2500\u2510*\u250c\u2500\u2500\u2500\u2510*\u250c\u2500\u2500\u2500\u2510 \u25023\u2502***\u25025\u2502******\u25026\u2502 \u2514\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2518*\u2514\u2500\u2500\u2500\u2518 * * * * * \u250c\u2500\u2500\u2500\u2510* \u25027\u2502*** \u2514\u2500\u2500\u2500\u2518 </p>"},{"location":"api/console-graph/","title":"Console Graph","text":""},{"location":"api/console-graph/#netext.ZoomSpec","title":"ZoomSpec  <code>dataclass</code>","text":"<pre><code>ZoomSpec(x: float, y: float)\n</code></pre>"},{"location":"api/console-graph/#netext.ZoomSpec.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x: float\n</code></pre> <p>Scaling along the x-axis.</p>"},{"location":"api/console-graph/#netext.ZoomSpec.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: float\n</code></pre> <p>Scaling along the y-axis.</p>"},{"location":"api/console-graph/#netext.AutoZoom","title":"AutoZoom","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/console-graph/#netext.AutoZoom.FIT","title":"FIT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIT = 'fit'\n</code></pre> <p>Fit the graph into the viewport.</p>"},{"location":"api/console-graph/#netext.AutoZoom.FIT_PROPORTIONAL","title":"FIT_PROPORTIONAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>FIT_PROPORTIONAL = 'fit_proportional'\n</code></pre> <p>Fit the graph into the viewport, but keep the aspect ratio.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph","title":"ConsoleGraph","text":"<pre><code>ConsoleGraph(\n    graph: DiGraph,\n    layout_engine: core.LayoutEngine = core.SugiyamaLayout(\n        core.LayoutDirection.TOP_DOWN\n    ),\n    console: Console = Console(),\n    viewport: Region | None = None,\n    max_width: int | None = None,\n    max_height: int | None = None,\n    zoom: float\n    | tuple[float, float]\n    | ZoomSpec\n    | AutoZoom = 1.0,\n)\n</code></pre> <p>A console representation of a networkx graph.</p> <p>The class conforms to the rich console protocol and can be printed as any other rich renderable. You can pass a layout engine and a specific console that will be used for rendering.</p> <p>Rendering of nodes and edges happens on object creation and the object size is determined by the graph (no reactive rendering).</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>G</code> <p>A networkx digraph object (networkx.DiGraph).</p> required <code>layout_engine</code> <code>LayoutEngine[G]</code> <p>The layout engine used.</p> <code>SugiyamaLayout(TOP_DOWN)</code> <code>console</code> <code>Console</code> <p>The rich console driver used to render.</p> <code>Console()</code> <code>viewport</code> <code>Region</code> <p>The viewport to render. Defaults to the whole graph.</p> <code>None</code> <code>zoom</code> <code>float | tuple[float, float] | ZoomSpec | AutoZoom</code> <p>The zoom level, either a float, a tuple of zoom in x and y direction or a zoom spec / auto zoom mode. Defaults to 1.0.</p> <code>1.0</code>"},{"location":"api/console-graph/#netext.ConsoleGraph.full_viewport","title":"full_viewport  <code>property</code>","text":"<pre><code>full_viewport: Region\n</code></pre> <p>The full viewport of the graph that is spanned by the whole graph.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.zoom","title":"zoom  <code>property</code> <code>writable</code>","text":"<pre><code>zoom: ZoomSpec | AutoZoom\n</code></pre> <p>The zoom level of the graph.</p> <p>Can be set either to a float, a tuple of zoom in x and y direction or a zoom spec / auto zoom mode. Defaults to 1.0, always returns a ZoomSpec or AutoZoom, so a float or tuple is converted to a ZoomSpec.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.viewport","title":"viewport  <code>property</code> <code>writable</code>","text":"<pre><code>viewport: Region\n</code></pre> <p>The viewport that is set by the user (or the full viewport if none is set).</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.max_width","title":"max_width  <code>property</code> <code>writable</code>","text":"<pre><code>max_width: int | None\n</code></pre> <p>The maximum width of the graph in characters or None if no maximum width is set.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.max_height","title":"max_height  <code>property</code> <code>writable</code>","text":"<pre><code>max_height: int | None\n</code></pre> <p>The maximum height of the graph in characters as integer or None if no maximum height is set.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.reset_viewport","title":"reset_viewport","text":"<pre><code>reset_viewport() -&gt; None\n</code></pre>"},{"location":"api/console-graph/#netext.ConsoleGraph.add_node","title":"add_node","text":"<pre><code>add_node(\n    node: Hashable,\n    position: FloatPoint | None = None,\n    data: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add a node to the console graph.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to add.</p> required <code>position</code> <code>FloatPoint | None</code> <p>If set add the node at the specific position in graph space coordinates.</p> <code>None</code> <code>data</code> <code>dict[str, Any] | None</code> <p>The data and attributes of the node.</p> <code>None</code>"},{"location":"api/console-graph/#netext.ConsoleGraph.update_node","title":"update_node","text":"<pre><code>update_node(\n    node: Hashable,\n    position: FloatPoint | None = None,\n    data: dict[str, Any] | None = None,\n    update_data: bool = True,\n) -&gt; None\n</code></pre> <p>Update a node position or attributes (data).</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to update.</p> required <code>position</code> <code>FloatPoint | None</code> <p>A new position if the node should be moved, by default None.</p> <code>None</code> <code>data</code> <code>dict[str, Any] | None</code> <p>A new or updated data dictionary, by default None.</p> <code>None</code> <code>update_data</code> <code>bool</code> <p>Whether to replace or update the data dictionary, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.remove_node","title":"remove_node","text":"<pre><code>remove_node(node: Hashable) -&gt; None\n</code></pre> <p>Removes the specified node from the graph, along with any edges that are connected to it.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to remove.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.add_edge","title":"add_edge","text":"<pre><code>add_edge(\n    u: Hashable,\n    v: Hashable,\n    data: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Add an edge between existing nodes in the graph.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node.</p> required <code>v</code> <code>Hashable</code> <p>The target node.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>The data and attributes of the edge.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>Raised if one of the edges does not exist in the graph.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.update_edge","title":"update_edge","text":"<pre><code>update_edge(\n    u: Hashable,\n    v: Hashable,\n    data: dict[str, Any],\n    update_data: bool = True,\n    update_layout: bool = True,\n) -&gt; None\n</code></pre> <p>Update edge attributes (data).</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node of the edge.</p> required <code>v</code> <code>Hashable</code> <p>The target node of the edge.</p> required <code>data</code> <code>dict[str, Any]</code> <p>The new or updated data dictionary.</p> required <code>update_data</code> <code>bool</code> <p>Whether to replace or update the data dictionary, by default True.</p> <code>True</code> <code>update_layout</code> <code>bool</code> <p>Whether to update the layout of the edge, by default True.</p> <code>True</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the zoom factor has not been computed yet.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.remove_edge","title":"remove_edge","text":"<pre><code>remove_edge(u: Hashable, v: Hashable) -&gt; None\n</code></pre> <p>Removes an edge from the graph.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node of the edge.</p> required <code>v</code> <code>Hashable</code> <p>The target node of the edge.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.to_graph_coordinates","title":"to_graph_coordinates","text":"<pre><code>to_graph_coordinates(p: Point) -&gt; FloatPoint\n</code></pre> <p>Converts a point from view coordinates to graph coordinates.</p> <p>This means applying the inverse zoom and offset to the point.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point</code> <p>The point to convert.</p> required <p>Returns:</p> Name Type Description <code>FloatPoint</code> <code>FloatPoint</code> <p>The converted point in graph coordinates.</p>"},{"location":"api/console-graph/#netext.ConsoleGraph.to_view_coordinates","title":"to_view_coordinates","text":"<pre><code>to_view_coordinates(p: FloatPoint) -&gt; Point\n</code></pre> <p>Converts a point from graph coordinates to view coordinates.</p> <p>This means applying the zoom and offset to the point.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>FloatPoint</code> <p>The point to convert.</p> required <p>Returns:</p> Name Type Description <code>Point</code> <code>Point</code> <p>The converted point in view coordinates.</p>"},{"location":"api/layout-engines/","title":"Layout Engines","text":""},{"location":"api/layout-engines/#netext.layout_engines.SugiyamaLayout","title":"SugiyamaLayout","text":"<pre><code>SugiyamaLayout(direction: LayoutDirection)\n</code></pre> <p>               Bases: <code>LayoutEngine</code></p>"},{"location":"api/layout-engines/#netext.layout_engines.StaticLayout","title":"StaticLayout","text":"<pre><code>StaticLayout()\n</code></pre> <p>               Bases: <code>LayoutEngine</code></p>"},{"location":"api/layout-engines/#netext.layout_engines.ForceDirectedLayout","title":"ForceDirectedLayout","text":"<pre><code>ForceDirectedLayout()\n</code></pre> <p>               Bases: <code>LayoutEngine</code></p>"},{"location":"api/layout-engines/#options","title":"Options","text":""},{"location":"api/layout-engines/#netext.layout_engines.LayoutDirection","title":"LayoutDirection","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/layout-engines/#netext.layout_engines.LayoutDirection.LEFT_RIGHT","title":"LEFT_RIGHT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT_RIGHT = 1\n</code></pre>"},{"location":"api/layout-engines/#netext.layout_engines.LayoutDirection.TOP_DOWN","title":"TOP_DOWN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TOP_DOWN = 0\n</code></pre>"},{"location":"api/styling/","title":"Styling &amp; Properties","text":""},{"location":"api/styling/#geometry","title":"Geometry","text":""},{"location":"api/styling/#netext.Region","title":"Region  <code>dataclass</code>","text":"<pre><code>Region(x: int, y: int, width: int, height: int)\n</code></pre>"},{"location":"api/styling/#netext.Region.bottom_right","title":"bottom_right  <code>property</code>","text":"<pre><code>bottom_right: Point\n</code></pre>"},{"location":"api/styling/#netext.Region.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[int, int, int, int]\n</code></pre>"},{"location":"api/styling/#netext.Region.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int\n</code></pre>"},{"location":"api/styling/#netext.Region.size","title":"size  <code>property</code>","text":"<pre><code>size: Size\n</code></pre>"},{"location":"api/styling/#netext.Region.top_left","title":"top_left  <code>property</code>","text":"<pre><code>top_left: Point\n</code></pre>"},{"location":"api/styling/#netext.Region.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int\n</code></pre>"},{"location":"api/styling/#netext.Region.x","title":"x  <code>instance-attribute</code>","text":"<pre><code>x: int\n</code></pre>"},{"location":"api/styling/#netext.Region.y","title":"y  <code>instance-attribute</code>","text":"<pre><code>y: int\n</code></pre>"},{"location":"api/styling/#netext.Region.from_points","title":"from_points  <code>staticmethod</code>","text":"<pre><code>from_points(u: Point, v: Point) -&gt; Region\n</code></pre>"},{"location":"api/styling/#netext.Region.union","title":"union  <code>staticmethod</code>","text":"<pre><code>union(regions: list[Region]) -&gt; Region\n</code></pre>"},{"location":"api/styling/#nodes","title":"Nodes","text":""},{"location":"api/styling/#netext.NodeProperties","title":"NodeProperties  <code>dataclass</code>","text":"<pre><code>NodeProperties(\n    shape: ShapeProperties = Box(),\n    style: Style = Style(),\n    content_style: Style = Style(),\n    margin: int = 0,\n    padding: PaddingDimensions = (0, 1),\n    content_renderer: Callable[\n        [str, dict[str, Any], Style], RenderableType\n    ] = _default_content_renderer,\n    lod_map: Callable[[float], int] = lambda _: 1,\n    lod_properties: dict[int, NodeProperties] = dict(),\n    ports: dict[str, Port] = dict(),\n    slots: bool = False,\n)\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.content_renderer","title":"content_renderer  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content_renderer: Callable[\n    [str, dict[str, Any], Style], RenderableType\n] = _default_content_renderer\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.content_style","title":"content_style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>content_style: Style = Style()\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.lod_map","title":"lod_map  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lod_map: Callable[[float], int] = lambda _: 1\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.lod_properties","title":"lod_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lod_properties: dict[int, NodeProperties] = field(\n    default_factory=dict\n)\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.margin","title":"margin  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>margin: int = 0\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.padding","title":"padding  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>padding: PaddingDimensions = (0, 1)\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.ports","title":"ports  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ports: dict[str, Port] = field(default_factory=dict)\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.shape","title":"shape  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shape: ShapeProperties = field(default_factory=Box)\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.slots","title":"slots  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slots: bool = False\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: Style = Style()\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.from_attribute_dict","title":"from_attribute_dict  <code>classmethod</code>","text":"<pre><code>from_attribute_dict(\n    data: dict[str, Any],\n    suffix: str = \"\",\n    fallback: Union[NodeProperties, None] = None,\n) -&gt; NodeProperties\n</code></pre>"},{"location":"api/styling/#netext.NodeProperties.from_data_dict","title":"from_data_dict  <code>classmethod</code>","text":"<pre><code>from_data_dict(data: dict[str, Any])\n</code></pre>"},{"location":"api/styling/#netext.Port","title":"Port  <code>dataclass</code>","text":"<pre><code>Port(\n    label: str = \"\",\n    magnet: Magnet | None = None,\n    key: int = 0,\n    symbol: str = \"\u25cb\",\n    symbol_connected: str = \"\u25cf\",\n    offset: int | None = None,\n)\n</code></pre>"},{"location":"api/styling/#netext.Port.key","title":"key  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>key: int = 0\n</code></pre>"},{"location":"api/styling/#netext.Port.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label: str = ''\n</code></pre>"},{"location":"api/styling/#netext.Port.magnet","title":"magnet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>magnet: Magnet | None = None\n</code></pre>"},{"location":"api/styling/#netext.Port.offset","title":"offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>offset: int | None = None\n</code></pre>"},{"location":"api/styling/#netext.Port.symbol","title":"symbol  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>symbol: str = '\u25cb'\n</code></pre>"},{"location":"api/styling/#netext.Port.symbol_connected","title":"symbol_connected  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>symbol_connected: str = '\u25cf'\n</code></pre>"},{"location":"api/styling/#netext.Port.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(value: Union[dict[str, Any], Port]) -&gt; Port\n</code></pre>"},{"location":"api/styling/#netext.ShapeProperties","title":"ShapeProperties  <code>dataclass</code>","text":"<pre><code>ShapeProperties(shape_type: Literal['box', 'just_content'])\n</code></pre>"},{"location":"api/styling/#netext.ShapeProperties.shape_type","title":"shape_type  <code>instance-attribute</code>","text":"<pre><code>shape_type: Literal['box', 'just_content']\n</code></pre>"},{"location":"api/styling/#netext.ShapeProperties.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(\n    value: dict[str, Any],\n    suffix: str,\n    fallback: ShapeProperties,\n) -&gt; ShapeProperties\n</code></pre>"},{"location":"api/styling/#netext.JustContent","title":"JustContent  <code>dataclass</code>","text":"<pre><code>JustContent(\n    shape_type: Literal[\n        \"box\", \"just_content\"\n    ] = \"just_content\",\n)\n</code></pre> <p>               Bases: <code>ShapeProperties</code></p>"},{"location":"api/styling/#netext.JustContent.shape_type","title":"shape_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shape_type: Literal['box', 'just_content'] = 'just_content'\n</code></pre>"},{"location":"api/styling/#netext.Box","title":"Box  <code>dataclass</code>","text":"<pre><code>Box(\n    shape_type: Literal[\"box\", \"just_content\"] = \"box\",\n    box_type: RichBox = ROUNDED,\n)\n</code></pre> <p>               Bases: <code>ShapeProperties</code></p>"},{"location":"api/styling/#netext.Box.box_type","title":"box_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>box_type: Box = ROUNDED\n</code></pre>"},{"location":"api/styling/#netext.Box.shape_type","title":"shape_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shape_type: Literal['box', 'just_content'] = 'box'\n</code></pre>"},{"location":"api/styling/#netext.Box.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(\n    value: dict[str, Any],\n    suffix: str,\n    fallback: ShapeProperties,\n) -&gt; Box\n</code></pre>"},{"location":"api/styling/#edges","title":"Edges","text":""},{"location":"api/styling/#netext.EdgeProperties","title":"EdgeProperties  <code>dataclass</code>","text":"<pre><code>EdgeProperties(\n    show: bool = True,\n    label: str | None = None,\n    style: Style = Style(),\n    dash_pattern: list[int] | None = None,\n    routing_mode: EdgeRoutingMode = EdgeRoutingMode.STRAIGHT,\n    segment_drawing_mode: EdgeSegmentDrawingMode = EdgeSegmentDrawingMode.SINGLE_CHARACTER,\n    start_arrow_tip: ArrowTip | None = None,\n    end_arrow_tip: ArrowTip | None = None,\n    start_port: str | None = None,\n    end_port: str | None = None,\n    start_magnet: Magnet = Magnet.CLOSEST,\n    end_magnet: Magnet = Magnet.CLOSEST,\n    lod_map: Callable[[float], int] = lambda _: 1,\n    lod_properties: dict[int, EdgeProperties] = dict(),\n)\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.dash_pattern","title":"dash_pattern  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>dash_pattern: list[int] | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.end_arrow_tip","title":"end_arrow_tip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_arrow_tip: ArrowTip | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.end_magnet","title":"end_magnet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_magnet: Magnet = CLOSEST\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.end_port","title":"end_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>end_port: str | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.label","title":"label  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>label: str | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.lod_map","title":"lod_map  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lod_map: Callable[[float], int] = lambda _: 1\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.lod_properties","title":"lod_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lod_properties: dict[int, EdgeProperties] = field(\n    default_factory=dict\n)\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.routing_mode","title":"routing_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>routing_mode: EdgeRoutingMode = STRAIGHT\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.segment_drawing_mode","title":"segment_drawing_mode  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>segment_drawing_mode: EdgeSegmentDrawingMode = (\n    SINGLE_CHARACTER\n)\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.show","title":"show  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>show: bool = True\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.start_arrow_tip","title":"start_arrow_tip  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_arrow_tip: ArrowTip | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.start_magnet","title":"start_magnet  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_magnet: Magnet = CLOSEST\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.start_port","title":"start_port  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>start_port: str | None = None\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.style","title":"style  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>style: Style = Style()\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.from_attribute_dict","title":"from_attribute_dict  <code>classmethod</code>","text":"<pre><code>from_attribute_dict(\n    data: dict[str, Any],\n    suffix: str = \"\",\n    fallback: Union[EdgeProperties, None] = None,\n) -&gt; EdgeProperties\n</code></pre>"},{"location":"api/styling/#netext.EdgeProperties.from_data_dict","title":"from_data_dict  <code>classmethod</code>","text":"<pre><code>from_data_dict(data: dict[str, Any])\n</code></pre>"},{"location":"api/styling/#netext.Magnet","title":"Magnet","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/styling/#netext.Magnet.TOP","title":"TOP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TOP = 1\n</code></pre>"},{"location":"api/styling/#netext.Magnet.LEFT","title":"LEFT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LEFT = 2\n</code></pre>"},{"location":"api/styling/#netext.Magnet.RIGHT","title":"RIGHT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RIGHT = 4\n</code></pre>"},{"location":"api/styling/#netext.Magnet.BOTTOM","title":"BOTTOM  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOTTOM = 3\n</code></pre>"},{"location":"api/styling/#netext.Magnet.CLOSEST","title":"CLOSEST  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CLOSEST = 5\n</code></pre>"},{"location":"api/styling/#netext.ArrowTip","title":"ArrowTip","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/styling/#netext.ArrowTip.ARROW","title":"ARROW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ARROW = 'arrow'\n</code></pre>"},{"location":"api/styling/#netext.EdgeRoutingMode","title":"EdgeRoutingMode","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/styling/#netext.EdgeRoutingMode.STRAIGHT","title":"STRAIGHT  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>STRAIGHT = 'straight'\n</code></pre>"},{"location":"api/styling/#netext.EdgeRoutingMode.ORTHOGONAL","title":"ORTHOGONAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ORTHOGONAL = 'orthogonal'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode","title":"EdgeSegmentDrawingMode","text":"<p>               Bases: <code>Enum</code></p>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.BOX","title":"BOX  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOX = 'box'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.BOX_ROUNDED","title":"BOX_ROUNDED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOX_ROUNDED = 'box_round'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.BOX_HEAVY","title":"BOX_HEAVY  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOX_HEAVY = 'box_heavy'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.BOX_DOUBLE","title":"BOX_DOUBLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BOX_DOUBLE = 'box_double'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.ASCII","title":"ASCII  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ASCII = 'ascii'\n</code></pre>"},{"location":"api/styling/#netext.EdgeSegmentDrawingMode.SINGLE_CHARACTER","title":"SINGLE_CHARACTER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SINGLE_CHARACTER = 'single_character'\n</code></pre>"},{"location":"api/textual-widget/","title":"Textual Widget","text":""},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView","title":"GraphView","text":"<pre><code>GraphView(\n    graph: DiGraph,\n    name: str | None = None,\n    id: str | None = None,\n    classes: str | None = None,\n    disabled: bool = False,\n    zoom: float\n    | tuple[float, float]\n    | ZoomSpec\n    | AutoZoom = 1.0,\n    scroll_via_viewport: bool = False,\n    **console_graph_kwargs,\n)\n</code></pre> <p>               Bases: <code>ScrollView</code></p> <p>Initializes a new instance of the Widget class.</p> <p>Parameters:</p> Name Type Description Default <code>graph</code> <code>DiGraph</code> <p>A graph object to be displayed in the widget.</p> required <code>name</code> <code>str | None</code> <p>A string representing the name of the widget (optional).</p> <code>None</code> <code>id</code> <code>str | None</code> <p>A string representing the ID of the widget (optional).</p> <code>None</code> <code>classes</code> <code>str | None</code> <p>A string representing the CSS classes of the widget (optional).</p> <code>None</code> <code>disabled</code> <code>bool</code> <p>A boolean indicating whether the widget is disabled (optional).</p> <code>False</code> <code>zoom</code> <code>float | tuple[float, float] | ZoomSpec | AutoZoom</code> <p>A float or tuple of floats representing the zoom level of the widget (optional).</p> <code>1.0</code> <code>scroll_via_viewport</code> <code>bool</code> <p>A boolean indicating whether the widget should scroll via the viewport (optional).</p> <code>False</code> <code>console_graph_kwargs</code> <p>Additional keyword arguments to be passed to the ConsoleGraph constructor.</p> <code>{}</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both viewport and scroll_via_viewport are specified.</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.graph","title":"graph  <code>property</code> <code>writable</code>","text":"<pre><code>graph: DiGraph\n</code></pre> <p>Returns and sets the graph object associated with this widget.</p> <p>Returns:</p> Name Type Description <code>DiGraph</code> <code>DiGraph</code> <p>The graph object associated with this widget.</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.add_node","title":"add_node","text":"<pre><code>add_node(\n    node: Hashable,\n    position: FloatPoint | None = None,\n    data: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Adds a node to the graph widget.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to add to the graph.</p> required <code>position</code> <code>FloatPoint | None</code> <p>The position of the node in the graph (optional). If set add the node at the specific position in graph space coordinates. If not set the node will be added and the layout will be recomputed.</p> <code>None</code> <code>data</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of node attributes, see ConsoleGraph.add_node (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.update_node","title":"update_node","text":"<pre><code>update_node(\n    node: Hashable,\n    position: Offset | None = None,\n    data: dict[str, Any] | None = None,\n    update_data: bool = True,\n) -&gt; None\n</code></pre> <p>Updates a node in the graph and reflects the changes in the console graph.</p> <p>See ConsoleGraph.update_node for comparison.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to update.</p> required <code>position</code> <code>Offset | None</code> <p>The new position of the node. Defaults to None.</p> <code>None</code> <code>data</code> <code>dict[str, Any] | None</code> <p>The new data to associate with the node. Defaults to None.</p> <code>None</code> <code>update_data</code> <code>bool</code> <p>Whether to merge the data associated with the node. Defaults to True.</p> <code>True</code>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.remove_node","title":"remove_node","text":"<pre><code>remove_node(node: Hashable) -&gt; None\n</code></pre> <p>Remove a node from the graph  and updates the console graph and the internal graph.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to remove from the graph.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.add_edge","title":"add_edge","text":"<pre><code>add_edge(\n    u: Hashable,\n    v: Hashable,\n    data: dict[str, Any] | None = None,\n) -&gt; None\n</code></pre> <p>Adds an edge to the graph widget.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node of the edge.</p> required <code>v</code> <code>Hashable</code> <p>The destination node of the edge.</p> required <code>data</code> <code>dict[str, Any] | None</code> <p>Optional dictionary of edge attributes, see ConsoleGraph.add_edge (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.update_edge","title":"update_edge","text":"<pre><code>update_edge(\n    u: Hashable,\n    v: Hashable,\n    data: dict[str, Any],\n    update_data: bool = True,\n    update_layout: bool = True,\n) -&gt; None\n</code></pre> <p>Updates the edge between nodes <code>u</code> and <code>v</code> with the given <code>data</code>.</p> <p>See ConsoleGraph.update_edge for comparison.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node of the edge.</p> required <code>v</code> <code>Hashable</code> <p>The destination node of the edge.</p> required <code>data</code> <code>dict[str, Any]</code> <p>The data to update the edge with.</p> required <code>update_data</code> <code>bool</code> <p>Whether to merge the data of the edge. Defaults to True.</p> <code>True</code> <code>update_layout</code> <code>bool</code> <p>Whether to update the layout of the graph. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.remove_edge","title":"remove_edge","text":"<pre><code>remove_edge(u: Hashable, v: Hashable) -&gt; None\n</code></pre> <p>Removes an edge from the graph and updates the console graph and the internal graph.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Hashable</code> <p>The source node of the edge.</p> required <code>v</code> <code>Hashable</code> <p>The destination node of the edge.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.attach_widget_to_node","title":"attach_widget_to_node","text":"<pre><code>attach_widget_to_node(\n    widget: Widget, node: Hashable, size: Size | None = None\n) -&gt; None\n</code></pre> <p>Attaches a widget to a node in the console graph.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>The textual widget to attach.</p> required <code>node</code> <code>Hashable</code> <p>The node to attach the widget to.</p> required <code>size</code> <code>Size | None</code> <p>The size of the widget, by default uses the node size (optional).</p> <code>None</code>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.detach_widget_from_node","title":"detach_widget_from_node","text":"<pre><code>detach_widget_from_node(node: Hashable) -&gt; None\n</code></pre> <p>Detach a widget from a node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Hashable</code> <p>The node to detach the widget from.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.to_graph_coordinates","title":"to_graph_coordinates","text":"<pre><code>to_graph_coordinates(p: Point | Offset) -&gt; FloatPoint\n</code></pre> <p>Converts a point or offset to graph coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point | Offset</code> <p>The point or offset to convert.</p> required <p>Returns:</p> Name Type Description <code>FloatPoint</code> <code>FloatPoint</code> <p>The converted point in graph coordinates.</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.view_to_widget_coordinates","title":"view_to_widget_coordinates","text":"<pre><code>view_to_widget_coordinates(p: Point) -&gt; Offset\n</code></pre> <p>Converts a point in the view's coordinate system to a point in the widget's coordinate system.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>Point</code> <p>The point to convert.</p> required <p>Returns:</p> Name Type Description <code>Offset</code> <code>Offset</code> <p>The converted point in the widget's coordinate system.</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.graph_to_widget_coordinates","title":"graph_to_widget_coordinates","text":"<pre><code>graph_to_widget_coordinates(p: FloatPoint) -&gt; Offset\n</code></pre> <p>Converts a point in graph coordinates to widget coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>p</code> <code>FloatPoint</code> <p>The point in graph coordinates.</p> required <p>Returns:</p> Name Type Description <code>Offset</code> <code>Offset</code> <p>The point in widget coordinates.</p>"},{"location":"api/textual-widget/#netext.textual_widget.widget.GraphView.widget_to_view_coordinates","title":"widget_to_view_coordinates","text":"<pre><code>widget_to_view_coordinates(offset: Offset) -&gt; Point\n</code></pre> <p>Converts widget coordinates to view coordinates.</p> <p>Parameters:</p> Name Type Description Default <code>offset</code> <code>Offset</code> <p>The offset to convert.</p> required <p>Returns:</p> Name Type Description <code>Point</code> <code>Point</code> <p>The converted point.</p>"},{"location":"reference/edges/","title":"Edge Attributes","text":""},{"location":"reference/edges/#visibility","title":"Visibility","text":"<p>The <code>show</code> attribute determines if edges are rendered. Hidden edges are not considered for edge routing.</p> <p>Type: bool.</p>"},{"location":"reference/edges/#level-of-detail","title":"Level of Detail","text":"<p>The <code>lod-map</code> attribute can be set to a function mapping zoom levels to discrete level of detail values. The function takes a single float parameter and returns an integer value. See Zoom and Viewport for details on how to use the level of detail to change the appearance of edges on different zoom levels.</p> <p>Type: Callable | None</p>"},{"location":"reference/edges/#arrow-tips","title":"Arrow Tips","text":"<p>The <code>start-arrow-tip</code> and <code>end-arrow-tip</code> attribute determines if edges are rendered with arrow tips.</p> <p>Type: ArrowTip | None.</p> <p>Possible values are:</p> Arrow Value Description No tips None Uses a single edge segment connecting start and endpoint. Arrow ArrowTip.ARROW Show an arrow tip using characters matching the <code>edge-segment-drawing-mode</code>."},{"location":"reference/edges/#examples","title":"Examples","text":"<p> ArrowTip.ARROW \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502\u2502C\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f *\u2502 *\u2502 *\u2502 *\u2502 *\u2502 v\u25bc \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502B\u2502\u2502D\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/edges/#label","title":"Label","text":"<p>The <code>label</code> attribute can be set to render a label on the edge.</p> <p>Type: str | None.</p>"},{"location":"reference/edges/#example","title":"Example","text":"<p> Label \u256d\u2500\u2500\u2500\u256e \u2502A\u2502 \u2570\u2500\u2500\u2500\u256f * * * Label * * \u256d\u2500\u2500\u2500\u256e \u2502B\u2502 \u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/edges/#style","title":"Style","text":"<p>The <code>style</code> attribute determines the rich style used to render the edge characters.</p> <p>Type: Style | None.</p>"},{"location":"reference/edges/#examples_1","title":"Examples","text":"<p> Style \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502\u2502C\u2502\u2502E\u2502\u2502G\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f **** **** **** **** **** **** \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502B\u2502\u2502D\u2502\u2502F\u2502\u2502H\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/edges/#dash-pattern","title":"Dash Pattern","text":"<p>The <code>dash-pattern</code> attribute determines a dash pattern. You can pass a list of integer values to it and the list will repeat an alternating on-off pattern for edges drawn.</p>"},{"location":"reference/edges/#examples_2","title":"Examples","text":"<p> Dashes \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502[1,\u00a01]\u2502\u2502[2,\u00a01]\u2502\u2502[3,\u00a02,\u00a01]\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f \u2502\u2502\u2502 \u2502\u2502 \u2502\u2502 \u2502 \u2502\u2502 \u2502 \u2502\u2502 \u2502 \u2502 \u2502\u2502 \u2502\u2502\u2502 \u2502\u2502\u2502 \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502B\u2502\u2502D\u2502\u2502F\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/edges/#magnets","title":"Magnets","text":"<p>The <code>start-magnet</code> and <code>end-magnet</code> attributes determine to which side of the node the edge is connected.</p> <p>Type: Magnet | None</p> <p>Possible values are:</p> Magnet Value Description Left Magnet.LEFT Connect to the left side of the node Right Magnet.RIGHT Connect to the right side of the node Top Magnet.TOP Connect to the top side of the node Bottom Magnet.BOTTOM Connect to the bottom side of the node Closest Magnet.CLOSEST Connect to the closest magnet position."},{"location":"reference/edges/#ports","title":"Ports","text":"<p>The <code>start-port</code> and <code>end-port</code> attributes determine to which port of the corresponding node the edge is connected to. The port needs to be declared as a property of the node. If set, the <code>start-magnet</code> and <code>end-magnet</code> attributes are ignored respectively.</p> <p>Type: str | None</p>"},{"location":"reference/edges/#edge-routing-mode","title":"Edge Routing Mode","text":"<p>The <code>edge-routing-mode</code> attribute determines how edges are routed from start to end point.</p> <p>Each edge is represented as a concatenation of one or more edge segments (straight lines).</p> <p>Type: EdgeRoutingMode | None</p> <p>Possible values are:</p> Edge Routing Mode Value Description Straight EdgeRoutingMode.STRAIGHT Uses a single edge segment connecting start and endpoint. (Default) Orthogonal EdgeRoutingMode.ORTHOGONAL Uses multiple vertical or horizontal edge segments."},{"location":"reference/edges/#example_1","title":"Example","text":"<p> Edge\u00a0Routing\u00a0Mode \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502***\u2502C\u2502****** \u2570\u2500\u2500\u2500\u256f*\u2570\u2500\u2500\u2500\u256f* ** ** ** ** ** ** \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502B\u2502\u2502D\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/edges/#edge-segment-drawing-mode","title":"Edge Segment Drawing Mode","text":"<p>The <code>edge-segment-drawing-mode</code> attribute determines how individual edge segments (straight lines) are drawn to the terminal.</p> <p>Possible values are:</p> Edge Segment Drawing Mode Value Description Single character EdgeSegmentDrawingMode.SINGLE_CHARACTER Uses a single character to draw the whole edge. (Default) Box EdgeSegmentDrawingMode.BOX Uses box drawing characters to draw lines. Corners between edge segments are merged. Works only with EdgeRoutingMode.ORTHOGONAL. Rounded Box EdgeSegmentDrawingMode.BOX_ROUNDED Uses box drawing characters to draw lines. Corners between edge segments are merged using rounded box characters. Works only with EdgeRoutingMode.ORTHOGONAL. Heavy Box EdgeSegmentDrawingMode.BOX_HEAVY Uses thicker box drawing characters to draw lines. Corners between edge segments are merged. Works only with EdgeRoutingMode.ORTHOGONAL. Double Box EdgeSegmentDrawingMode.BOX_DOUBLE Uses double line box drawing characters to draw lines. Corners between edge segments are merged. Works only with EdgeRoutingMode.ORTHOGONAL. ASCII compatible EdgeSegmentDrawingMode.ASCII Uses ASCII characters to draw orthogonal lines. Corners between edge segments are merged with plus signs. Works only with EdgeRoutingMode.ORTHOGONAL."},{"location":"reference/edges/#examples_3","title":"Examples","text":"<p> Style \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502***\u2502C\u2502\u2500\u2500\u2510\u2502E\u2502\u2500\u2500\u256e\u2502G\u2502\u2501\u2501\u2513 \u2570\u2500\u2500\u2500\u256f*\u2570\u2500\u2500\u2500\u256f\u2502\u2570\u2500\u2500\u2500\u256f\u2502\u2570\u2500\u2500\u2500\u256f\u2503 *\u2502\u2502\u2503 *\u2502\u2502\u2503 *\u2502\u2502\u2503 *\u2502\u2502\u2503 *\u2502\u2502\u2503 *\u2502\u2502\u2503 *\u256d\u2500\u2500\u2500\u256e\u2502\u256d\u2500\u2500\u2500\u256e\u2502\u256d\u2500\u2500\u2500\u256e\u2503\u256d\u2500\u2500\u2500\u256e ***\u2502B\u2502\u2514\u2500\u2500\u2502D\u2502\u2570\u2500\u2500\u2502F\u2502\u2517\u2501\u2501\u2502H\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502I\u2502\u2550\u2550\u2557\u2502K\u2502--+ \u2570\u2500\u2500\u2500\u256f\u2551\u2570\u2500\u2500\u2500\u256f| \u2551| \u2551| \u2551| \u2551| \u2551| \u2551| \u2551\u256d\u2500\u2500\u2500\u256e|\u256d\u2500\u2500\u2500\u256e \u255a\u2550\u2550\u2502J\u2502+--\u2502L\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/nodes/","title":"Node Attributes","text":""},{"location":"reference/nodes/#visibility","title":"Visibility","text":"<p>The <code>show</code> attribute determines if nodes are rendered. Hidden nodes are not considered for edge routing but are passed and considered for the node layout.</p> <p>Type: bool.</p>"},{"location":"reference/nodes/#level-of-detail","title":"Level of Detail","text":"<p>The <code>lod-map</code> attribute can be set to a function mapping zoom levels to discrete level of detail values. The function takes a single float parameter and returns an integer value. See Zoom and Viewport for details on how to use the level of detail to change the appearance of nodes on different zoom levels.</p> <p>Type: Callable | None</p>"},{"location":"reference/nodes/#shape","title":"Shape","text":"<p>The <code>shape</code> attribute determines the surrounding decoration around the content of the node.</p> <p>Type: str | None</p> <p>Possible values are:</p> Shape Value Description Box box Renders a Panel around the content. (Default) None just-content Only renders the content."},{"location":"reference/nodes/#examples","title":"Examples","text":"<p> Shapes \u256d\u2500\u2500\u2500\u256e A************\u2502B\u2502 \u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/nodes/#box","title":"Box","text":"<p>The box shape renders the content within a Panel. For box shapes the folowing can attribute can be set:</p>"},{"location":"reference/nodes/#box-type","title":"Box Type","text":"<p>The box type is determined via <code>box-type</code>.</p> <p>Type: Box</p>"},{"location":"reference/nodes/#example","title":"Example","text":"<p> Box\u00a0Types \u2554\u2550\u2550\u2550\u2557\u256d\u2500\u2500\u2500\u256e \u2551A\u2551*****\u2502B\u2502 \u255a\u2550\u2550\u2550\u255d\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/nodes/#generic-styling-for-all-shapes","title":"Generic styling for all shapes","text":""},{"location":"reference/nodes/#style","title":"Style","text":"<p>The <code>style</code> attribute determines the style that is applied to the shape of the node (not the content).</p> <p>Type: Style | None</p>"},{"location":"reference/nodes/#example_1","title":"Example","text":"<p> Style \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502*****\u2502B\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/nodes/#content-style","title":"Content Style","text":"<p>The <code>content-style</code> attribute is passed to the content renderer function.</p> <p>Type: Style | None</p>"},{"location":"reference/nodes/#example_2","title":"Example","text":"<p> Content\u00a0Style \u256d\u2500\u2500\u2500\u256e\u256d\u2500\u2500\u2500\u256e \u2502A\u2502*****\u2502B\u2502 \u2570\u2500\u2500\u2500\u256f\u2570\u2500\u2500\u2500\u256f </p>"},{"location":"reference/nodes/#content-renderer","title":"Content Renderer","text":"<p>The <code>content-renderer</code> attribute is a function that takes three parameters, node label (<code>str</code>), node data (<code>Any</code>) and content style and returns a rich renderable.</p> <p>Type: Callable | None</p>"},{"location":"reference/nodes/#ports","title":"Ports","text":"<p>The <code>ports</code> attribute determines the ports of the node. Ports are used to connect edges to nodes. Ports are defined as a dictionary mapping port names to port specifications. The port specifications are a dictionary with the following keys: <code>magnet</code>, <code>label</code>, <code>offset</code>, <code>symbol</code>, <code>symbol-connected</code>, <code>key</code>.</p> <p>Ports are optional and a port only needs to be specified if it is used as a target or source of an edge. A port specification must at least contain a <code>label</code>. All other keys are optional.</p> Key Type Description <code>magnet</code> <code>str</code> The magnet position of the port. <code>label</code> <code>str</code> The label of the port. <code>offset</code> <code>Tuple[int, int]</code> The offset of the port from the node position. <code>symbol</code> <code>str</code> The symbol to use for the port. <code>symbol-connected</code> <code>str</code> The symbol to use for the port when it is connected to an edge. <code>key</code> <code>str</code> The key of the port used when sorting ports on a side of a node."},{"location":"reference/nodes/#example_3","title":"Example","text":"<pre><code>from netext import ConsoleGraph\nfrom netext.layout_engines import StaticLayout\nfrom rich import print\nfrom rich.style import Style\n\nimport networkx as nx\ng = nx.Graph()\ng.add_node(\"X\", **{\n        \"$x\": 5,\n        \"$y\": 0,\n        \"$ports\": {\"a\": {\"label\": \"a\"}, \"b\": {\"label\": \"b\"}}\n    }\n)\ng.add_node(\"Y\", **{\n    \"$x\": 25,\n    \"$y\": 0,\n    \"$ports\": {\"a\": {\"label\": \"a\"}, \"b\": {\"label\": \"b\"}}\n    }\n)\ng.add_edge(\"X\", \"Y\", **{\"$start-port\": \"a\", \"$end-port\": \"a\"})\n\nprint(ConsoleGraph(g, layout_engine=StaticLayout()))\n</code></pre> <p> Ports \u256d\u2500\u2500\u2500\u2500\u2500\u256e \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e**\u25cfa\u2502 \u25cbbXa\u25cf**********\u2502Y\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\u25cbb\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"user-guide/styling-graphs/","title":"Styling Graphs","text":""},{"location":"user-guide/styling-graphs/#node-styling","title":"Node Styling","text":"<p>Node Styling Attributes</p> <p>See the Node Attribute Reference for a list of all node styling attributes.</p> <p>Nodes can be styled by adding attributes to the networkx graph nodes. All netext attributes are starting with a <code>$</code> sign to avoid clashes with other attributes.</p> <p>If you want to style the whole graph in the same way you can call:</p> <pre><code>import networkx as nx\n...\nnx.set_node_attributes(g, \"none\", \"$shape\")\n</code></pre> <p>To set the shape of all nodes in the graph <code>g</code> to none. Alternatively you can set individual attributes:</p> <pre><code>g.nodes[\"somenode\"][\"$shape\"] = \"none\"\n</code></pre>"},{"location":"user-guide/styling-graphs/#edge-styling","title":"Edge Styling","text":"<p>Edge Styling Attributes</p> <p>See the Edge Attribute Reference for a list of all edge styling attributes.</p> <p>Edges can be styled in a similar way as nodes.</p> <p>If you want to style the whole graph in the same way you can call:</p> <pre><code>import networkx as nx\n...\nnx.set_edge_attributes(g, EdgeRoutingMode.straight, \"$edge-routing-mode\")\n</code></pre> <p>To set the shape of all nodes in the graph <code>g</code> to none. Alternatively you can set individual attributes:</p> <pre><code>g.edges[\"a\"][\"b\"][\"$edge-routing-mode\"] = EdgeRoutingMode.straight\n</code></pre>"},{"location":"user-guide/styling-graphs/#styling-via-properties","title":"Styling via Properties","text":"<p>You can also style the graph via properties. This way you can use code completion to see all available properties and their values and also benefit from type checking. The attribute based styling, however is easier to encode when storing the graph in a file.</p> <pre><code>import networkx as nx\nfrom netext import EdgeProperties, NodeProperties, EdgeRoutingMode\n...\nnx.set_edge_attributes(g, EdgeProperties(routing_mode=EdgeRoutingMode.ORTHOGONAL), \"$properties\")\n</code></pre> <p>See the API Documentation for a full documentation of all possible properties.</p>"},{"location":"user-guide/textual-widget/","title":"Graph Widget for Textual","text":""},{"location":"user-guide/textual-widget/#introduction","title":"Introduction","text":"<p>Netext has native support for textual and offers a widget to display and mutate graphs. The widget emits events for nodes and edges that have been clicked and also support the transformation from widget to view and graph coordinates.</p>"},{"location":"user-guide/textual-widget/#example","title":"Example","text":"<p>The following code is the most simple example. It uses the graph from the minimal example and shows it in a widget.</p> textual.py<pre><code>from textual.app import App, ComposeResult\nfrom textual.widgets import Header\nfrom netext.textual_widget.widget import GraphView\n\nimport networkx as nx\n\ng = nx.DiGraph()\ng.add_node(\"Hello\")\ng.add_node(\"World\")\ng.add_edge(\"Hello\", \"World\")\n\n\nclass GraphviewApp(App):\n    \"\"\"A Textual app that displays a graph.\"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        \"\"\"Create child widgets for the app.\"\"\"\n        yield Header()\n        yield GraphView(g)\n\n\nif __name__ == \"__main__\":\n    app = GraphviewApp()\n    app.run()\n</code></pre> <p>If you run this app you will see the following screen:</p> <p> textual.py \u2b58GraphviewApp \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502Hello\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f * * * * * \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e \u2502World\u2502 \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f </p>"},{"location":"user-guide/zoom-and-viewport/","title":"Zoom and Viewport","text":"<p>When creating a ConsoleGraph it is possible to specify a zoom level and a viewport. The zoom level determines how close or far apart nodes are placed, but can also change the way and size of nodes. The viewport allows to select only a certain part of the graph to be rendered. By default the zoom level is one and the viewport is spanning all rendered parts of the graph.</p>"},{"location":"user-guide/zoom-and-viewport/#viewport","title":"Viewport","text":"<p>The viewport, if explicitly specified, is passed as a region, e.g.:</p> <pre><code>from netext.geometry import Region\n...\nConsoleGraph(g, viewport=Region(-20, -25, 40, 15))\n</code></pre> <p>that determines the upper left point, i.e. <code>(-20, -25)</code> and the size of the region, i.e. <code>(40, 15)</code>.</p> <p>Info</p> <p>Graphs are centered around the <code>(0,0)</code> coordinate, so negative coordinates are common for specifying viewports. You can use ConsoleGraph.full_viewport to find the maximum extent of your viewport.</p>"},{"location":"user-guide/zoom-and-viewport/#zoom","title":"Zoom","text":"<p>You can specify the zoom of the rendered graph with respect to the default zoom level of 1 which is what is returned by the layout engine, where a larger value means zooming in and a smaller value means zooming out. It is possible to zoom x and y directions independently. Furthermore, to set the zoom to fit the available renderable area (with keeping the aspect ratio or not), by using AutoZoom.FIT or AutoZoom.FIT_PROPORTIONAL respectively.</p>"},{"location":"user-guide/zoom-and-viewport/#level-of-detail","title":"Level of Detail","text":"<p>The zoom level by default only changes how nodes are placed, but not the size or shape of nodes. This can be changes by introducing a mapping from zoom level to level of detail (lod). Such a map can be supplied to edges and nodes as an attribute. The default level of detail is one. For level of detail values other than one, the styling can be changed be adding <code>-{lod}</code> suffix to the attributes. For example, if you want to replace all nodes by small circles once you zoom our more than 50% you can do the following:</p> <pre><code># Add a mapping from zoom level ot level of detail.\nnx.set_node_attributes(g, lambda zoom: 0 if zoom &lt; 0.5 else 1, \"$lod-map\")\n# For lod 0, remove the shape.\nnx.set_node_attributes(g, \"just-content\", \"$shape-0\")\n# For lod 0, replace the content by a circle.\nnx.set_node_attributes(g, lambda _, __, ___: \"\u23fa\", \"$content-renderer-0\")\n</code></pre>"},{"location":"user-guide/zoom-and-viewport/#coordinate-systems","title":"Coordinate Systems","text":"<p>There are two relevant coordinate systems (more if you use netext in a textual widget). The first one is the graph coordinate system, which uses a floating point representation and are the coordinates that are used to layout the graph. The second is the view coordinate system, which is linked to the the graph coordinate system by a transpose, scale and round transformation. The view coordinate system is thus using integer coordinates and represent individual characters on the console.</p> <p>The size of the nodes is specified in the view coordinate system and mapped without transformation into the graph coordinate system. Hence, if you zoom out nodes will move closer together, but stay the same size, unless you implement a level of detail mapping.</p> <p>The viewport then determines the part of the graph in view coordinates that will be rendered to the console.</p>"}]}