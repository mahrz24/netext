from _typeshed import Incomplete

def has_z(geometry, **kwargs): ...
def is_ccw(geometry, **kwargs): ...
def is_closed(geometry, **kwargs): ...
def is_empty(geometry, **kwargs): ...
def is_geometry(geometry, **kwargs): ...
def is_missing(geometry, **kwargs): ...
def is_prepared(geometry, **kwargs): ...
def is_valid_input(geometry, **kwargs): ...
def is_ring(geometry, **kwargs): ...
def is_simple(geometry, **kwargs): ...
def is_valid(geometry, **kwargs): ...
def is_valid_reason(geometry, **kwargs): ...
def crosses(a, b, **kwargs): ...
def contains(a, b, **kwargs): ...
def contains_properly(a, b, **kwargs): ...
def covered_by(a, b, **kwargs): ...
def covers(a, b, **kwargs): ...
def disjoint(a, b, **kwargs): ...
def equals(a, b, **kwargs): ...
def intersects(a, b, **kwargs): ...
def overlaps(a, b, **kwargs): ...
def touches(a, b, **kwargs): ...
def within(a, b, **kwargs): ...
def equals_exact(a, b, tolerance: float = ..., **kwargs): ...
def relate(a, b, **kwargs): ...
def relate_pattern(a, b, pattern, **kwargs): ...
def dwithin(a, b, distance, **kwargs): ...
def contains_xy(geom, x, y: Incomplete | None = ..., **kwargs): ...
def intersects_xy(geom, x, y: Incomplete | None = ..., **kwargs): ...
