[
    {
        "label": "TerminalGraph",
        "importPath": "netext",
        "description": "netext",
        "isExtraImport": true,
        "detail": "netext",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "print",
        "importPath": "rich",
        "description": "rich",
        "isExtraImport": true,
        "detail": "rich",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "TerminalGraph",
        "importPath": "netext.terminal_graph",
        "description": "netext.terminal_graph",
        "isExtraImport": true,
        "detail": "netext.terminal_graph",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "binomial_tree",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "paley_graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "grandalf.graphs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grandalf.graphs",
        "description": "grandalf.graphs",
        "detail": "grandalf.graphs",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "importPath": "grandalf.graphs",
        "description": "grandalf.graphs",
        "isExtraImport": true,
        "detail": "grandalf.graphs",
        "documentation": {}
    },
    {
        "label": "Edge",
        "importPath": "grandalf.graphs",
        "description": "grandalf.graphs",
        "isExtraImport": true,
        "detail": "grandalf.graphs",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "grandalf.graphs",
        "description": "grandalf.graphs",
        "isExtraImport": true,
        "detail": "grandalf.graphs",
        "documentation": {}
    },
    {
        "label": "graph_core",
        "importPath": "grandalf.graphs",
        "description": "grandalf.graphs",
        "isExtraImport": true,
        "detail": "grandalf.graphs",
        "documentation": {}
    },
    {
        "label": "SugiyamaLayout",
        "importPath": "grandalf.layouts",
        "description": "grandalf.layouts",
        "isExtraImport": true,
        "detail": "grandalf.layouts",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "NonNegativeInt",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "NonNegativeInt",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PositiveInt",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "NonNegativeInt",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "PositiveInt",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Segment",
        "importPath": "rich.segment",
        "description": "rich.segment",
        "isExtraImport": true,
        "detail": "rich.segment",
        "documentation": {}
    },
    {
        "label": "Segment",
        "importPath": "rich.segment",
        "description": "rich.segment",
        "isExtraImport": true,
        "detail": "rich.segment",
        "documentation": {}
    },
    {
        "label": "Segment",
        "importPath": "rich.segment",
        "description": "rich.segment",
        "isExtraImport": true,
        "detail": "rich.segment",
        "documentation": {}
    },
    {
        "label": "Segment",
        "importPath": "rich.segment",
        "description": "rich.segment",
        "isExtraImport": true,
        "detail": "rich.segment",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "rich.style",
        "description": "rich.style",
        "isExtraImport": true,
        "detail": "rich.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "rich.style",
        "description": "rich.style",
        "isExtraImport": true,
        "detail": "rich.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "rich.style",
        "description": "rich.style",
        "isExtraImport": true,
        "detail": "rich.style",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "rich.style",
        "description": "rich.style",
        "isExtraImport": true,
        "detail": "rich.style",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "merge",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "ConsoleOptions",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "RenderResult",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Measurement",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "examples.test",
        "description": "examples.test",
        "peekOfCode": "g = binomial_tree(4)\ng1 = paley_graph(8)\nprint(Panel(TerminalGraph(g), title=\"Binomial Tree\", expand=False))\nprint(Panel(TerminalGraph(g1), title=\"Payley Graph\", expand=False))",
        "detail": "examples.test",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 5,
        "importPath": "examples.test",
        "description": "examples.test",
        "peekOfCode": "g1 = paley_graph(8)\nprint(Panel(TerminalGraph(g), title=\"Binomial Tree\", expand=False))\nprint(Panel(TerminalGraph(g1), title=\"Payley Graph\", expand=False))",
        "detail": "examples.test",
        "documentation": {}
    },
    {
        "label": "LayoutEngine",
        "kind": 6,
        "importPath": "netext.layout_engines.engine",
        "description": "netext.layout_engines.engine",
        "peekOfCode": "class LayoutEngine:\n    pass",
        "detail": "netext.layout_engines.engine",
        "documentation": {}
    },
    {
        "label": "GrandalfView",
        "kind": 6,
        "importPath": "netext.layout_engines.grandalf",
        "description": "netext.layout_engines.grandalf",
        "peekOfCode": "class GrandalfView:\n    w = 0\n    h = 0\n    xy = (0, 0)\ndef _create_vertex(node: Hashable, data: Dict[Hashable, Any]) -> Vertex:\n    v = Vertex(node)\n    v.view = GrandalfView()\n    # TODO: A width of 1 does not work well and makes to much space, so we scale up by some arbitrary constant\n    v.view.w = data[\"_netext_node_buffer\"].width*5\n    v.view.h = data[\"_netext_node_buffer\"].height*5",
        "detail": "netext.layout_engines.grandalf",
        "documentation": {}
    },
    {
        "label": "GrandalfSugiyamaLayout",
        "kind": 6,
        "importPath": "netext.layout_engines.grandalf",
        "description": "netext.layout_engines.grandalf",
        "peekOfCode": "class GrandalfSugiyamaLayout(LayoutEngine):\n    def __call__(self, g):\n        vertices = {node: _create_vertex(node, data) for node, data in g.nodes(data=True)}\n        edges = [Edge(vertices[u], vertices[v]) for u,v in g.edges]\n        graph = graph_core(vertices.values(), edges)\n        sug = SugiyamaLayout(graph)\n        sug.init_all(roots=[vertices[0]])\n        sug.draw(3)\n        # Rescale back, but leave a bit more space to avoid overlaps in the\n        # terminal coordinate space.",
        "detail": "netext.layout_engines.grandalf",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "netext.edge_rasterizer",
        "description": "netext.edge_rasterizer",
        "peekOfCode": "class Point(BaseModel):\n    x: NonNegativeInt\n    y: NonNegativeInt\nclass EdgeBuffer(SegmentBuffer):\n    start: Point\n    end: Point\n    @property\n    def left_x(self):\n        return min(self.start.x, self.end.x)\n    @property",
        "detail": "netext.edge_rasterizer",
        "documentation": {}
    },
    {
        "label": "EdgeBuffer",
        "kind": 6,
        "importPath": "netext.edge_rasterizer",
        "description": "netext.edge_rasterizer",
        "peekOfCode": "class EdgeBuffer(SegmentBuffer):\n    start: Point\n    end: Point\n    @property\n    def left_x(self):\n        return min(self.start.x, self.end.x)\n    @property\n    def right_x(self):\n        return max(self.start.x, self.end.x)\n    @property",
        "detail": "netext.edge_rasterizer",
        "documentation": {}
    },
    {
        "label": "rasterize_edge",
        "kind": 2,
        "importPath": "netext.edge_rasterizer",
        "description": "netext.edge_rasterizer",
        "peekOfCode": "def rasterize_edge(\n    u_buffer: NodeBuffer, v_buffer: NodeBuffer, data: Dict[Hashable, Any]\n) -> EdgeBuffer:\n    # TODO: In the first prototype we just support straight lines from\n    # center point to center point\n    x0 = u_buffer.x\n    y0 = u_buffer.y\n    x1 = v_buffer.x\n    y1 = v_buffer.y\n    segments = []",
        "detail": "netext.edge_rasterizer",
        "documentation": {}
    },
    {
        "label": "NodeBuffer",
        "kind": 6,
        "importPath": "netext.node_rasterizer",
        "description": "netext.node_rasterizer",
        "peekOfCode": "class NodeBuffer(SegmentBuffer):\n    x: NonNegativeInt\n    y: NonNegativeInt\n    width: PositiveInt\n    height: PositiveInt\n    @property\n    def left_x(self):\n        return self.x - math.floor(self.width / 2)\n    @property\n    def right_x(self):",
        "detail": "netext.node_rasterizer",
        "documentation": {}
    },
    {
        "label": "rasterize_node",
        "kind": 2,
        "importPath": "netext.node_rasterizer",
        "description": "netext.node_rasterizer",
        "peekOfCode": "def rasterize_node(node, data) -> NodeBuffer:\n    segment = Segment(str(node), Style(color=\"red\"))\n    return NodeBuffer(\n        x=0,\n        y=0,\n        width=segment.cell_length,\n        height=1,\n        segments=[OffsetSegment(x_offset=0, y_offset=0, segment=segment)],\n    )",
        "detail": "netext.node_rasterizer",
        "documentation": {}
    },
    {
        "label": "OffsetSegment",
        "kind": 6,
        "importPath": "netext.segment_buffer",
        "description": "netext.segment_buffer",
        "peekOfCode": "class OffsetSegment(BaseModel):\n    segment: Any # TODO Should be segment, check pydantic arbitrary types or not use pydantic.\n    x_offset: NonNegativeInt # Offset from left x\n    y_offset: NonNegativeInt # Offset from top y\nclass SegmentBuffer(BaseModel):\n    segments: List[OffsetSegment]\n    @property\n    def left_x(self):\n        return NotImplemented\n    @property",
        "detail": "netext.segment_buffer",
        "documentation": {}
    },
    {
        "label": "SegmentBuffer",
        "kind": 6,
        "importPath": "netext.segment_buffer",
        "description": "netext.segment_buffer",
        "peekOfCode": "class SegmentBuffer(BaseModel):\n    segments: List[OffsetSegment]\n    @property\n    def left_x(self):\n        return NotImplemented\n    @property\n    def right_x(self):\n        return NotImplemented\n    @property\n    def top_y(self):",
        "detail": "netext.segment_buffer",
        "documentation": {}
    },
    {
        "label": "TerminalGraph",
        "kind": 6,
        "importPath": "netext.terminal_graph",
        "description": "netext.terminal_graph",
        "peekOfCode": "class TerminalGraph(Generic[G]):\n    def __init__(self, g: G, layout_engine: LayoutEngine = GrandalfSugiyamaLayout()):\n        self._nx_graph = g.copy()\n        # First we create the node buffers, this allows us to pass the sizing information to the\n        # layout engine. For each node in the graph we generate a node buffer that contains the\n        # segments to render the node and metadata where to place the buffer and information\n        # about padding.\n        node_buffers: Dict[Hashable, NodeBuffer] = {\n            node: rasterize_node(node, data)\n            for node, data in self._nx_graph.nodes(data=True)",
        "detail": "netext.terminal_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "netext.terminal_graph",
        "description": "netext.terminal_graph",
        "peekOfCode": "G = TypeVar(\"G\", nx.Graph, nx.DiGraph)\nclass TerminalGraph(Generic[G]):\n    def __init__(self, g: G, layout_engine: LayoutEngine = GrandalfSugiyamaLayout()):\n        self._nx_graph = g.copy()\n        # First we create the node buffers, this allows us to pass the sizing information to the\n        # layout engine. For each node in the graph we generate a node buffer that contains the\n        # segments to render the node and metadata where to place the buffer and information\n        # about padding.\n        node_buffers: Dict[Hashable, NodeBuffer] = {\n            node: rasterize_node(node, data)",
        "detail": "netext.terminal_graph",
        "documentation": {}
    }
]